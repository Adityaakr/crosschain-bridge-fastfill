import 'dotenv/config';
import { createWalletClient, createPublicClient, http, parseAbi } from 'viem';
import { privateKeyToAccount } from 'viem/accounts';
import { arbitrumSepolia } from 'viem/chains';

async function main() {
  const account = privateKeyToAccount(process.env.ARB_RELAYER_PK);
  const client = createWalletClient({
    account,
    chain: arbitrumSepolia,
    transport: http(process.env.ARB_RPC_URL)
  });

  const publicClient = createPublicClient({
    chain: arbitrumSepolia,
    transport: http(process.env.ARB_RPC_URL)
  });

  console.log('Deploying ArbPostApprove on Arbitrum Sepolia...');
  console.log('Deployer:', account.address);
  console.log('Min Receive (6dp):', '9800000'); // 9.8 USDC

  // Deploy ArbPostApprove with minReceive = 9_800_000 (9.8 USDC with 6 decimals)
  const hash = await client.deployContract({
    abi: parseAbi([
      'constructor(uint256 _minReceive)'
    ]),
    bytecode: '0x60a060405234801561000f575f80fd5b5060405161037838038061037883398101604081905261002e91610036565b60805261004d565b5f60208284031215610046575f80fd5b5051919050565b60805161030d61006b5f395f81816065015261015f015261030d5ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063be76b40214610038578063ff8bc6ee14610060575b5f80fd5b61004b6100463660046101dd565b610095565b60405190151581526020015b60405180910390f35b6100877f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610057565b5f60028210156100eb5760405162461bcd60e51b815260206004820152601860248201527f696e73756666696369656e742072657475726e20646174610000000000000000604482015260640160405180910390fd5b5f83835f8181106100fe576100fe610244565b90506020028101906101109190610258565b81019061011d919061029b565b90505f848461012d6001826102b2565b81811061013c5761013c610244565b905060200281019061014e9190610258565b81019061015b919061029b565b90507f000000000000000000000000000000000000000000000000000000000000000061018883836102b2565b1015979650505050505050565b5f8083601f8401126101a5575f80fd5b50813567ffffffffffffffff8111156101bc575f80fd5b6020830191508360208260051b85010111156101d6575f80fd5b9250929050565b5f805f80604085870312156101f0575f80fd5b843567ffffffffffffffff80821115610207575f80fd5b61021388838901610195565b9096509450602087013591508082111561022b575f80fd5b5061023887828801610195565b95989497509550505050565b634e487b7160e01b5f52603260045260245ffd5b5f808335601e1984360301811261026d575f80fd5b83018035915067ffffffffffffffff821115610287575f80fd5b6020019150368190038213156101d6575f80fd5b5f602082840312156102ab575f80fd5b5035919050565b818103818111156102d157634e487b7160e01b5f52601160045260245ffd5b9291505056fea264697066735822122076c12a7743f6583a9005c5066d0b28650a8ba3e14e09753a1a3ecd199a2d03f564736f6c63430008180033',
    args: [
      9800000n // 9.8 USDC with 6 decimals
    ]
  });

  console.log('Deployment transaction:', hash);
  
  // Wait for transaction receipt to get contract address
  const receipt = await publicClient.waitForTransactionReceipt({ hash });
  console.log('ArbPostApprove deployed at:', receipt.contractAddress);
  console.log('Update your .env with: ARB_POST_APPROVE=' + receipt.contractAddress);
}

main().catch(console.error);
